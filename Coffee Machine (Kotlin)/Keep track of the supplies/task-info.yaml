type: edu
files:
- name: src/machine/Main.kt
  visible: true
  text: |
    package machine

    open class Coffee(val water: Int,val milk: Int, val beans: Int, val cost: Int)
    class Espresso(water: Int = 250, milk: Int = 0, beans: Int = 16, cost: Int = 4) : Coffee(water, milk, beans, cost)
    class Latte(water: Int = 350, milk: Int = 75, beans: Int = 20, cost: Int = 7) : Coffee(water, milk, beans, cost)
    class Cappuccino(water: Int = 200, milk: Int = 100, beans: Int = 12, cost: Int = 6) : Coffee(water, milk, beans, cost)

    val espresso: Espresso = Espresso()
    val latte: Latte = Latte()
    val cappuccino: Cappuccino = Cappuccino()


    class Machine(var waterAmount: Int = 400,var milkAmount: Int = 540, var beansAmount: Int = 120, var cups: Int = 9, var cash: Int = 550) {
        fun available() {
            println("""The coffee machine has:
    $waterAmount ml of water
    $milkAmount ml of milk
    $beansAmount g of coffee beans
    $cups disposable cups
    ${'$'}$cash of money""")
        }

        fun start() {
            machine.available()
            println("\nWrite action (buy, fill, take):")
            var action = readln()
            if (action == "buy") {
                customer.buy()
            } else if (action == "fill") {
                machine.fill()
            } else if (action == "take") {
                machine.take()
            } else {
                println("Invalid action")
            }
            println()
            machine.available()
        }

        fun fill() {
            println("Write how many ml of water you want to add:")
            waterAmount += readln().toIntOrNull() ?: 0
            println("Write how many ml of milk you want to add:")
            milkAmount += readln().toIntOrNull() ?: 0
            println("Write how many grams of coffee beans you want to add:")
            beansAmount += readln().toIntOrNull() ?: 0
            println("Write how many disposable cups you want to add:")
            cups += readln().toIntOrNull() ?: 0
        }

        fun take() {
            println("I gave you \$$cash")
            cash = 0
        }
    }

    val machine: Machine = Machine()

    class Customer {
        fun buy() {
            println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:")
            var choice = readln().toIntOrNull() ?: 0
            if (choice == 1) {
                machine.waterAmount -= espresso.water
                machine.milkAmount -= espresso.milk
                machine.beansAmount -= espresso.beans
                machine.cups -= 1
                machine.cash += espresso.cost
            } else if (choice == 2) {
                machine.waterAmount -= latte.water
                machine.milkAmount -= latte.milk
                machine.beansAmount -= latte.beans
                machine.cups -= 1
                machine.cash += latte.cost
            } else if (choice == 3) {
                machine.waterAmount -= cappuccino.water
                machine.milkAmount -= cappuccino.milk
                machine.beansAmount -= cappuccino.beans
                machine.cups -= 1
                machine.cash += cappuccino.cost
            } else {
                println("Invalid choice")
            }
        }
    }

    val customer: Customer = Customer()

    fun main() {
        machine.start()
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/67/stages/364/implement#comment
status: Solved
record: 4
